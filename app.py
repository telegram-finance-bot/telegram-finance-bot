import os
import json
import gspread
import asyncio
import logging
from datetime import datetime
from telegram import Update
from telegram.error import RetryAfter
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)
from google.oauth2.service_account import Credentials
from gspread.exceptions import SpreadsheetNotFound, APIError
from threading import Thread

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã ===
TOKEN = os.environ.get("BOT_TOKEN")
SHEET_NAME = os.environ.get("SHEET_NAME")
CREDS_FILE = os.environ.get("CREDS_FILE")

if not all([TOKEN, SHEET_NAME, CREDS_FILE]):
    logger.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# === Google Sheets ===
try:
    with open(CREDS_FILE) as f:
        creds_data = json.load(f)

    SCOPES = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive.file"
    ]
    credentials = Credentials.from_service_account_info(creds_data, scopes=SCOPES)
    client = gspread.authorize(credentials)
    sheet = client.open(SHEET_NAME)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ª–∏—Å—Ç–æ–≤
    for worksheet_name in ['GIM', 'TR']:
        try:
            sheet.worksheet(worksheet_name)
        except gspread.WorksheetNotFound:
            sheet.add_worksheet(title=worksheet_name, rows=100, cols=20)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç: {worksheet_name}")
            
except SpreadsheetNotFound:
    logger.error("Google Sheet –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –∏–º—è –∏ –¥–æ—Å—Ç—É–ø.")
    exit(1)
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    exit(1)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
(
    CHOOSE_MODE, ENTER_DATE, ENTER_NAME, ENTER_TYPE, 
    ENTER_BT, ENTER_CARD, ENTER_HELPER, 
    ENTER_EARNED, ENTER_OT, ENTER_DINCEL, ENTER_TIME
) = range(11)

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.id}")
    await update.message.reply_text(
        "üèãÔ∏è‚Äç‚ôÇÔ∏è –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n"
        "‚Ä¢ <b>GIM</b> - –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∑–∞–ª–µ\n"
        "‚Ä¢ <b>TR</b> - –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
        parse_mode='HTML'
    )
    return CHOOSE_MODE

async def choose_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = update.message.text.strip().upper()
    if mode not in ["GIM", "TR"]:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ GIM –∏–ª–∏ TR.")
        return CHOOSE_MODE
        
    context.user_data.clear()
    context.user_data["mode"] = mode
    reply = "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–î–î.–ú–ú):" if mode == "GIM" else "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø TR: WORK –∏–ª–∏ OUT"
    await update.message.reply_text(reply)
    return ENTER_DATE if mode == "GIM" else ENTER_TYPE

# ... [–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏, –Ω–æ –¥–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫] ...

async def enter_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time"] = update.message.text
    user = context.user_data
    now = datetime.now().strftime("%d-%b")

    try:
        worksheet = sheet.worksheet(user["mode"])
        
        if user["mode"] == "GIM":
            row = [
                now, user["name"], user["work_type"], user["bt"],
                "", "", user["card"], "", "", "", user["helper"],
                user["earned"], "", "", "", "", user["time"]
            ]
        elif user["work_type"].upper() == "WORK":
            row = [
                now, user["name"], user["work_type"], user["bt"],
                "", "", user["card"], "", "", "", user["helper"],
                user["earned"], "", "", "", "", user["time"]
            ]
        else:
            row = [""] * 18 + [user["earned"], user["time"]]
            
        worksheet.append_row(row, value_input_option="USER_ENTERED")
        await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
    except APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Google Sheets: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

# === Webhook —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ===
async def safe_set_webhook(app, url, max_retries=3):
    for attempt in range(max_retries):
        try:
            await app.bot.set_webhook(url)
            logger.info("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except RetryAfter as e:
            wait = e.retry_after + 2
            logger.warning(f"Flood control, –∂–¥–µ–º {wait} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(wait)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    return False

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_mode)],
            ENTER_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_date)],
            ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)],
            ENTER_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_type)],
            ENTER_BT: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_bt)],
            ENTER_CARD: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_card)],
            ENTER_HELPER: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_helper)],
            ENTER_EARNED: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_earned)],
            ENTER_OT: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_ot)],
            ENTER_DINCEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_dincel)],
            ENTER_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_time)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    webhook_url = "https://telegram-finance-bot-0ify.onrender.com"
    if not await safe_set_webhook(app, webhook_url):
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
        exit(1)
        
    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        webhook_url=webhook_url,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
