import os
import json
import gspread
import logging
import asyncio
from aiohttp import web
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes
)
from google.oauth2.service_account import Credentials
from gspread.exceptions import WorksheetNotFound

# –õ–æ–≥–≥–µ—Ä
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Health-check endpoint
async def handle_health_check(request):
    return web.Response(text="OK", status=200)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def check_environment():
    required = ["BOT_TOKEN", "SHEET_ID", "CREDS_FILE", "WEBHOOK_URL", "PORT"]
    for key in required:
        if not os.environ.get(key):
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {key}")
            return False
    if not os.path.exists(os.environ["CREDS_FILE"]):
        logger.error("‚ùå CREDS_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    return True

# Google Sheets
def init_google_sheets():
    try:
        with open(os.environ["CREDS_FILE"]) as f:
            creds_data = json.load(f)
        credentials = Credentials.from_service_account_info(
            creds_data,
            scopes=["https://www.googleapis.com/auth/spreadsheets"]
        )
        client = gspread.authorize(credentials)
        sheet = client.open_by_key(os.environ["SHEET_ID"])
        logger.info(f"üìÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ç–∞–±–ª–∏—Ü–µ: {sheet.title}")
        for name in ["GIM", "TR"]:
            try:
                sheet.worksheet(name)
            except WorksheetNotFound:
                sheet.add_worksheet(title=name, rows=100, cols=20)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç: {name}")
        return sheet
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets: {e}")
        return None

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/start ‚Äî –∑–∞–ø—É—Å–∫\n/help ‚Äî –ø–æ–º–æ—â—å")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def async_main():
    if not check_environment():
        raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    sheet = init_google_sheets()
    if not sheet:
        raise RuntimeError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets")

    app = web.Application()
    app.add_routes([web.get("/", handle_health_check)])

    application = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).web_app(app).build()
    application.bot_data["sheet"] = sheet
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    await application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ["PORT"]),
        webhook_url=os.environ["WEBHOOK_URL"],
        drop_pending_updates=True
    )

if __name__ == "__main__":
    asyncio.run(async_main())
