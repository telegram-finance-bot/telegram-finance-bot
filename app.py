import os
import json
import gspread
import logging
import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes
)
from google.oauth2.service_account import Credentials
from gspread.exceptions import WorksheetNotFound

# –õ–æ–≥
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
def check_env():
    for key in ["BOT_TOKEN", "SHEET_ID", "CREDS_FILE", "WEBHOOK_URL", "PORT"]:
        if not os.getenv(key):
            raise Exception(f"‚ùå –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {key}")
    if not os.path.exists(os.getenv("CREDS_FILE")):
        raise Exception("‚ùå CREDS_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Sheets
def init_sheets():
    with open(os.getenv("CREDS_FILE")) as f:
        data = json.load(f)
    creds = Credentials.from_service_account_info(data, scopes=[
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive.file"
    ])
    client = gspread.authorize(creds)
    sheet = client.open_by_key(os.getenv("SHEET_ID"))
    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ç–∞–±–ª–∏—Ü–µ: {sheet.title}")
    for name in ["GIM", "TR"]:
        try:
            sheet.worksheet(name)
        except WorksheetNotFound:
            sheet.add_worksheet(title=name, rows=100, cols=20)
    return sheet

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/start ‚Äî –∑–∞–ø—É—Å–∫\n/help ‚Äî –ø–æ–º–æ—â—å")

# –ó–∞–ø—É—Å–∫
async def main():
    check_env()
    sheet = init_sheets()

    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
    app.bot_data["sheet"] = sheet
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))

    await app.initialize()
    await app.start()
    await app.bot.set_webhook(url=os.getenv("WEBHOOK_URL"))
    logger.info("üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
